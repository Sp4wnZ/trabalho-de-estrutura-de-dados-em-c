#include <stdio.h>


void imprimirVetor(int vetor[],int n){
    for(int i=0; i<n;i++) {
        printf("%d", vetor[i]);
    }
    printf("\n");
}


void bubbleSort(int vetor[],int n){
    for (int i=0;i<n-1;i++) {
        for (int j=0;j< n-i-1; j++){
            if (vetor[j] > vetor[j+1]) {
                
                int temp=vetor[j];
                vetor[j] =vetor[j+1];
                vetor[j + 1]=temp;
            }
        }
    }
}


void insertionSort(int vetor[], int n){
    for (int i=1; i<n; i++) {
        int chave=vetor[i];
        int j=i-1;
        while (j >= 0 && vetor[j]>chave) {
            vetor[j+1]=vetor[j];
            j--;
        }
        vetor[j+1]=chave;
    }
}

int main() {
    int n;
    printf("Digite o tamanho do vetor:");
    scanf("%d", &n);

    int vetor[n];
    printf("Digite os elementos do vetor:\n");
    for (int i = 0; i < n; i++){
        scanf("%d", &vetor[i]);
    }

    int opcao;
    printf("\nEscolha o algoritmo de ordenacao:\n");
    printf("1. Bubble Sort\n");
    printf("2. Insertion Sort\n");
    printf("Opcao:");
    scanf("%d", &opcao);

    printf("\nVetor original:");
    imprimirVetor(vetor, n);

    switch (opcao) {
        case 1:
            bubbleSort(vetor, n);
            printf("Vetor ordenado usando Bubble Sort:");
            imprimirVetor(vetor, n);
            break;
        case 2:
            insertionSort(vetor, n);
            printf("Vetor ordenado usando Insertion Sort:");
            imprimirVetor(vetor, n);
            break;
        default:
            printf("Opcao invalida!\n");
            break;
    }

    return 0;
}
