#include <stdio.h>
#include <stdlib.h>


struct StackNode {
    int data;
    struct StackNode* next;
};


struct StackNode* createStackNode(int data) {
    struct StackNode* newNode = (struct StackNode*)malloc(sizeof(struct StackNode));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}


void push(struct StackNode** top, int data) {
    struct StackNode* newNode = createStackNode(data);
    newNode->next = *top;
    *top = newNode;
}


int pop(struct StackNode** top) {
    if (*top == NULL) {
        printf("Pilha vazia.\n");
        return -1;
    }
    struct StackNode* temp = *top;
    int data = temp->data;
    *top = (*top)->next;
    free(temp);
    return data;
}


void printStack(struct StackNode* top) {
    printf("Pilha: ");
    while (top != NULL) {
        printf("%d ", top->data);
        top = top->next;
    }
    printf("\n");
}


void clearStack(struct StackNode** top) {
    while (*top != NULL) {
        struct StackNode* temp = *top;
        *top = (*top)->next;
        free(temp);
    }
    printf("Pilha limpa.\n");
}


void printTop(struct StackNode* top) {
    if (top == NULL) {
        printf("Pilha vazia.\n");
    } else {
        printf("Topo da Pilha: %d\n", top->data);
    }
}


struct QueueNode {
    int data;
    struct QueueNode* next;
};

struct Queue {
    struct QueueNode* front;
    struct QueueNode* rear;
};


struct Queue* createQueue() {
    struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue));
    queue->front = NULL;
    queue->rear = NULL;
    return queue;
}


void enqueue(struct Queue* queue, int data) {
    struct QueueNode* newNode = (struct QueueNode*)malloc(sizeof(struct QueueNode));
    newNode->data = data;
    newNode->next = NULL;
    if (queue->rear == NULL) {
        queue->front = newNode;
        queue->rear = newNode;
    } else {
        queue->rear->next = newNode;
        queue->rear = newNode;
    }
}


int dequeue(struct Queue* queue) {
    if (queue->front == NULL) {
        printf("Fila vazia.\n");
        return -1;
    }
    struct QueueNode* temp = queue->front;
    int data = temp->data;
    queue->front = queue->front->next;
    if (queue->front == NULL) {
        queue->rear = NULL;
    }
    free(temp);
    return data;
}


void printQueue(struct Queue* queue) {
    struct QueueNode* current = queue->front;
    printf("Fila: ");
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}


void clearQueue(struct Queue* queue) {
    while (queue->front != NULL) {
        struct QueueNode* temp = queue->front;
        queue->front = queue->front->next;
        free(temp);
    }
    queue->rear = NULL;
    printf("Fila limpa.\n");
}


int findMaxQueue(struct Queue* queue) {
    int max = -1;
    struct QueueNode* current = queue->front;
    while (current != NULL) {
        if (current->data > max) {
            max = current->data;
        }
        current = current->next;
    }
    if (max == -1) {
        printf("Fila vazia.\n");
    } else {
        printf("Maior elemento da Fila: %d\n", max);
    }
    return max;
}


int findMinQueue(struct Queue* queue) {
    int min = -1;
    struct QueueNode* current = queue->front;
    if (current == NULL) {
        printf("Fila vazia.\n");
        return min;
    }
    min = current->data;
    while (current != NULL) {
        if (current->data < min) {
            min = current->data;
        }
        current = current->next;
    }
    printf("Menor elemento da Fila: %d\n", min);
    return min;
}


struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
};


struct TreeNode* createTreeNode(int data) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}


struct TreeNode* insert(struct TreeNode* root, int data) {
    if (root == NULL) {
        root = createTreeNode(data);
    } else if (data <= root->data) {
        root->left = insert(root->left, data);
    } else {
        root->right = insert(root->right, data);
    }
    return root;
}


struct TreeNode* search(struct TreeNode* root, int data) {
    if (root == NULL || root->data == data) {
        return root;
    }
    if (data < root->data) {
        return search(root->left, data);
    }
    return search(root->right, data);
}


void inorder(struct TreeNode* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}


void printRightRootLeft(struct TreeNode* root) {
    if (root != NULL) {
        printRightRootLeft(root->right);
        printf("%d ", root->data);
        printRightRootLeft(root->left);
    }
}


int findMax(struct TreeNode* root) {
    if (root == NULL) {
        printf("Árvore vazia.\n");
        return -1;
    }
    if (root->right == NULL) {
        return root->data;
    }
    return findMax(root->right);
}

int main() {
    int opcao;
    int data;
    struct StackNode* stackTop = NULL;
    struct Queue* queue = createQueue();
    struct TreeNode* root = NULL;

    do {
        printf("\nEscolha uma opção:\n");
        printf("1. Executar Pilha\n");
        printf("2. Executar Fila\n");
        printf("3. Executar Árvore\n");
        printf("4. Sair\n");
        printf("Opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                do {
                    printf("\nEscolha uma opção:\n");
                    printf("1. Empilhar elemento\n");
                    printf("2. Desempilhar elemento\n");
                    printf("3. Imprimir Pilha\n");
                    printf("4. Limpar Pilha\n");
                    printf("5. Imprimir Topo da Pilha\n");
                    printf("6. Voltar ao menu principal\n");
                    printf("Opção: ");
                    scanf("%d", &opcao);

                    switch (opcao) {
                        case 1:
                            printf("Digite o elemento a ser empilhado: ");
                            scanf("%d", &data);
                            push(&stackTop, data);
                            printf("Elemento empilhado com sucesso.\n");
                            break;
                        case 2:
                            data = pop(&stackTop);
                            if (data != -1) {
                                printf("Elemento desempilhado: %d\n", data);
                            }
                            break;
                        case 3:
                            printStack(stackTop);
                            break;
                        case 4:
                            clearStack(&stackTop);
                            break;
                        case 5:
                            printTop(stackTop);
                            break;
                        case 6:
                            break;
                        default:
                            printf("Opção inválida.\n");
                            break;
                    }
                }while(opcao != 6);
                break;
            case 2:
                do {
                    printf("\nEscolha uma opção:\n");
                    printf("1. Enfileirar elemento\n");
                    printf("2. Desenfileirar elemento\n");
                    printf("3. Imprimir Fila\n");
                    printf("4. Limpar Fila\n");
                    printf("5. Maior elemento da Fila\n");
                    printf("6. Menor elemento da Fila\n");
                    printf("7. Voltar ao menu principal\n");
                    printf("Opção: ");
                    scanf("%d", &opcao);

                    switch (opcao) {
                        case 1:
                            printf("Digite o elemento a ser enfileirado: ");
                            scanf("%d", &data);
                            enqueue(queue, data);
                            printf("Elemento enfileirado com sucesso.\n");
                            break;
                        case 2:
                            data = dequeue(queue);
                            if (data != -1) {
                                printf("Elemento desenfileirado: %d\n", data);
                            }
                            break;
                        case 3:
                            printQueue(queue);
                            break;
                        case 4:
                            clearQueue(queue);
                            break;
                        case 5:
                            findMaxQueue(queue);
                            break;
                        case 6:
                            findMinQueue(queue);
                            break;
                        case 7:
                            break;
                        default:
                            printf("Opção inválida.\n");
                            break;
                    }
                }while (opcao != 7);
                break;
            case 3:
                do {
                    printf("\nEscolha uma opção:\n");
                    printf("1. Inserir elemento na Árvore Binária\n");
                    printf("2. Buscar elemento na Árvore Binária\n");
                    printf("3. Imprimir Árvore Binária em ordem\n");
                    printf("4. Imprimir Árvore Binária (sub-árvore à direita primeiro)\n");
                    printf("5. Maior elemento da Árvore Binária\n");
                    printf("6. Voltar ao menu principal\n");
                    printf("Opção: ");
                    scanf("%d", &opcao);

                    switch(opcao){
                        case 1:
                            printf("Digite o elemento a ser inserido: ");
                            scanf("%d", &data);
                            root = insert(root, data);
                            printf("Elemento inserido na Árvore Binária.\n");
                            break;
                        case 2:
                            printf("Digite o elemento a ser buscado:");
                            scanf("%d", &data);
                            struct TreeNode* result = search(root, data);
                            if (result == NULL) {
                                printf("Elemento não encontrado na Árvore Binária.\n");
                            } else {
                                printf("Elemento encontrado na Árvore Binária.\n");
                            }
                            break;
                        case 3:
                            printf("Árvore Binária em ordem:");
                            inorder(root);
                            printf("\n");
                            break;
                        case 4:
                            printf("Árvore Binária (sub-árvore à direita primeiro):");
                            printRightRootLeft(root);
                            printf("\n");
                            break;
                        case 5:
                            int max = findMax(root);
                            if (max != -1) {
                                printf("Maior elemento da Árvore Binária: %d\n", max);
                            }
                            break;
                        case 6:
                            break;
                        default:
                            printf("Opção inválida.\n");
                            break;
                    }
                }while(opcao != 6);
                break;
            case 4:
                printf("Encerrando o programa.\n");
                break;
            default:
                printf("Opção inválida.\n");
                break;
        }
    }while(opcao != 4);

    return 0;
}
